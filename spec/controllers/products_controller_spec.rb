require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProductsController do

  # This should return the minimal set of attributes required to create a valid
  # Product. As you add validations to Product, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ProductsController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all products as @products" do
      # product = Product.create! valid_attributes
      product = FactoryGirl.create(:product)
      get :index
      expect(assigns(:products)).to match_array([product])
    end

    it "renders the index view" do
      get :index
      expect(response).to render_template :index
    end
  end

  describe "GET show" do
    it "assigns the requested product as @product" do
      product = FactoryGirl.create(:product)
      get :show, id: product
      expect(assigns(:product)).to eq(product)
    end

    it "renders the show view" do
      product = FactoryGirl.create(:product)
      get :show, id: product
      expect(response).to render_template :show
    end
  end

  describe "GET new" do
    it "assigns a new product as @product" do
      get :new
      expect(assigns(:product)).to be_a_new(Product)
    end

    it "renders the new view" do
      get :new
      expect(response).to render_template :new
    end
  end

  describe "GET edit" do
    it "assigns the requested product as @product" do
      product = FactoryGirl.create(:product)
      get :edit, id: product
      expect(assigns(:product)).to eq(product)
    end

    it "renders the edit view" do
      product = FactoryGirl.create(:product)
      get :edit, id: product
      expect(response).to render_template :edit
    end
  end

  describe "POST create" do
    context "with valid params" do
      it "creates a new Product" do
        expect {
          post :create, product: FactoryGirl.attributes_for(:product) }.to change(Product, :count).by(1)
      end

      it "assigns a newly created product as @product" do
        post :create, product: FactoryGirl.attributes_for(:product)
        assigns(:product).should be_a(Product)
        assigns(:product).should be_persisted
      end

      it "redirects to the created product" do
        post :create, product: FactoryGirl.attributes_for(:product)
        response.should redirect_to(Product.last)
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved product as @product" do
        expect{post :create, product: FactoryGirl.attributes_for(:invalid_product)}.to_not change(Product, :count)
      end

      it "re-renders the 'new' template" do
        post :create, product: FactoryGirl.attributes_for(:invalid_product)
        expect(response).to render_template :new
      end
    end
  end

  describe "PUT update" do
    before :each do
      @product = FactoryGirl.create(:product)
    end

    context "with valid params" do
      it "locates the requested @product" do
        patch :update, id: @product, product: FactoryGirl.attributes_for(:product)
        expect(assigns(:product)).to eq @product
      end

      it "changes @product's attributes" do
        put :update, id: @product, product: FactoryGirl.attributes_for(:update_product)
        @product.reload
        expect(@product.name).to eq("update_product")
        expect(@product.img_url).to eq("update_url")
        expect(@product.price).to eq(5.2)
      end

      it "redirects to the product" do
        put :update, id: @product, product: FactoryGirl.attributes_for(:product)
        expect(response).to redirect_to @product
      end
    end

    context "with invalid params" do
      it "does not change the product's attributes" do
        put :update, id: @product, product: FactoryGirl.attributes_for(:invalid_product)
        @product.reload
        expect(@product.name).to_not eq("invalid_product")
        expect(@product.price).to eq(9.99)
      end

      it "re-renders the 'edit' template" do
        put :update, id: @product, product: FactoryGirl.attributes_for(:invalid_product)
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    before :each do
      @product = FactoryGirl.create(:product)
    end

    it "destroys the requested product" do
      expect {
        delete :destroy, id: @product
      }.to change(Product, :count).by(-1)
    end

    it "redirects to the products list" do
      delete :destroy, id: @product
      expect(response).to redirect_to(products_url)
    end
  end

end
